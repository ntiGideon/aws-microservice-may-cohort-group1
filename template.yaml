AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Freelance Job/Task Platform
 
  Unified serverless freelance platform with single API Gateway.

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, prod, staging-test]
    Description: Environment name
  
  UsersTableName:
    Type: String
    Default: dev-UsersTable
    Description: Name of the existing Users table

Globals:
  Function:
    Runtime: java17
    MemorySize: 1024
    Timeout: 30

Resources:
  ## =========================
  ## Freelance Platform API Gateway
  ## =========================
  FreelancePlatformApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${Environment}-freelance-platform-api"
      StageName: Prod
      EndpointConfiguration: REGIONAL
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-User-ID,X-User-Email,X-User-Role'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
        AllowCredentials: false
      BinaryMediaTypes:
        - "*/*"
      TracingEnabled: true
      Variables:
        ENVIRONMENT: !Ref Environment
      Tags:
        Environment: !Ref Environment
        Project: FreelancePlatform
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
            IdentitySource: "$request.header.Authorization"
            AuthorizationScopes: []
      GatewayResponses:
        UNAUTHORIZED:
          StatusCode: 401
          ResponseTemplates:
            "application/json": '{"message": "Unauthorized"}'
      DefinitionBody:
        openapi: 3.0.1
        info:
          title: !Sub "${Environment}-freelance-platform-api"
          version: 1.0.0
        paths:
          "/job/{proxy+}":
            x-amazon-apigateway-any-method:
              security:
                - CognitoAuthorizer: []
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${JobRouterFunction.Arn}/invocations"
          "/categories":
            get:
              x-amazon-apigateway-auth: 
                type: NONE
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCategoriesFunction.Arn}/invocations"
            post:
              security:
                - CognitoAuthorizer: []
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateCategoryFunction.Arn}/invocations"
        components:
          securitySchemes:
            CognitoAuthorizer:
              type: apiKey
              name: Authorization
              in: header
              x-amazon-apigateway-authtype: cognito_user_pools
              x-amazon-apigateway-authorizer:
                type: cognito_user_pools
                providerARNs:
                  - !GetAtt UserPool.Arn

  ## =========================
  ## DynamoDB Tables
  ## =========================
  CategoriesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-CategoriesTable"
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        - AttributeName: categoryId
          AttributeType: S
        - AttributeName: name
          AttributeType: S
      KeySchema:
        - AttributeName: categoryId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: NameIndex
          KeySchema:
            - AttributeName: name
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: FreelancePlatform
        - Key: Service
          Value: Categories

  JobsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-JobsTable"
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        - AttributeName: jobId
          AttributeType: S
        - AttributeName: categoryId
          AttributeType: S
        - AttributeName: status
          AttributeType: S
        - AttributeName: ownerId
          AttributeType: S
        - AttributeName: datePosted
          AttributeType: S
        - AttributeName: expiryDate
          AttributeType: S
        - AttributeName: claimerId
          AttributeType: S
        - AttributeName: claimedAt
          AttributeType: S
      KeySchema:
        - AttributeName: jobId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: CategoryStatusIndex
          KeySchema:
            - AttributeName: categoryId
              KeyType: HASH
            - AttributeName: status
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: OwnerJobsIndex
          KeySchema:
            - AttributeName: ownerId
              KeyType: HASH
            - AttributeName: datePosted
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: StatusExpiryIndex
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: expiryDate
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: ClaimerJobsIndex
          KeySchema:
            - AttributeName: claimerId
              KeyType: HASH
            - AttributeName: claimedAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: FreelancePlatform
        - Key: Service
          Value: Jobs

  ClaimsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-ClaimsTable"
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        - AttributeName: claimId
          AttributeType: S
        - AttributeName: jobId
          AttributeType: S
        - AttributeName: status
          AttributeType: S
        - AttributeName: claimerId
          AttributeType: S
        - AttributeName: claimedAt
          AttributeType: S
        - AttributeName: submissionDeadline
          AttributeType: S
      KeySchema:
        - AttributeName: claimId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: JobClaimsIndex
          KeySchema:
            - AttributeName: jobId
              KeyType: HASH
            - AttributeName: status
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: ClaimerClaimsIndex
          KeySchema:
            - AttributeName: claimerId
              KeyType: HASH
            - AttributeName: claimedAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: StatusDeadlineIndex
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: submissionDeadline
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: FreelancePlatform
        - Key: Service
          Value: Jobs

  ## =========================
  ## EventBridge Resources
  ## =========================
  JobsEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub "${Environment}-freelance-jobs-events"

  ## =========================
  ## SNS Topic for Notifications
  ## =========================
  JobNotificationsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${Environment}-job-notifications"
      DisplayName: "Job Platform Notifications"

  ## =========================
  ## Job Expiry System
  ## =========================
  JobExpiryQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${Environment}-job-expiry-queue.fifo"
      FifoQueue: true
      ContentBasedDeduplication: false
      MessageRetentionPeriod: 1209600  # 14 days
      VisibilityTimeout: 300    # 5 minutes
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt JobExpiryDeadLetterQueue.Arn
        maxReceiveCount: 3

  JobExpiryDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${Environment}-job-expiry-dlq.fifo"
      FifoQueue: true
      MessageRetentionPeriod: 1209600  # 14 days

  ## =========================
  ## Job Timeout System  
  ## =========================
  JobTimeoutQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${Environment}-job-timeout-queue.fifo"
      FifoQueue: true
      ContentBasedDeduplication: false
      MessageRetentionPeriod: 1209600  # 14 days
      VisibilityTimeout: 300    # 5 minutes
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt JobTimeoutDeadLetterQueue.Arn
        maxReceiveCount: 3

  JobTimeoutDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${Environment}-job-timeout-dlq.fifo"
      FifoQueue: true
      MessageRetentionPeriod: 1209600  # 14 days

  ## =========================
  ## Categories Lambda Functions
  ## =========================
  CreateCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-CreateCategory"
      CodeUri: categories/
      Handler: com.freelance.categories.CreateCategoryHandler::handleRequest
      Environment:
        Variables:
          CATEGORIES_TABLE_NAME: !Ref CategoriesTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CategoriesTable

  GetCategoriesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-GetCategories"
      CodeUri: categories/
      Handler: com.freelance.categories.GetCategoriesHandler::handleRequest
      Environment:
        Variables:
          CATEGORIES_TABLE_NAME: !Ref CategoriesTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref CategoriesTable

  CategoryStreamProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-CategoryStreamProcessor"
      CodeUri: categories/
      Handler: com.freelance.categories.CategoryStreamProcessor::handleRequest
      Environment:
        Variables:
          CATEGORIES_TABLE_NAME: !Ref CategoriesTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CategoriesTable
        - Statement:
          - Effect: Allow
            Action:
              - sns:CreateTopic
              - sns:GetTopicAttributes
            Resource: "*"
      Events:
        CategoryStreamEvent:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt CategoriesTable.StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 5

  ## =========================
  ## Jobs Lambda Functions
  ## =========================
  JobRouterFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-JobRouter"
      CodeUri: jobs/
      Handler: com.freelance.jobs.shared.JobRouter::handleRequest
      Timeout: 60
      Environment:
        Variables:
          JOBS_TABLE_NAME: !Ref JobsTable
          CATEGORIES_TABLE_NAME: !Ref CategoriesTable
          EVENT_BUS_NAME: !Ref JobsEventBus
          AWS_ACCOUNT_ID: !Ref AWS::AccountId
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref JobsTable
        - DynamoDBReadPolicy:
            TableName: !Ref CategoriesTable
        - Statement:
          - Effect: Allow
            Action:
              - events:PutEvents
            Resource: !GetAtt JobsEventBus.Arn

  ## Lambda Permissions for API Gateway
  JobRouterInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref JobRouterFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${FreelancePlatformApi}/*/*"

  CreateCategoryInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CreateCategoryFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${FreelancePlatformApi}/*/POST/categories"

  GetCategoriesInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetCategoriesFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${FreelancePlatformApi}/*/GET/categories"

  ## =========================
  ## Event Processor Functions
  ## =========================
  JobCreatedProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-JobCreatedProcessor"
      CodeUri: jobs/
      Handler: com.freelance.jobs.events.processors.NotifyJobCategorySubscribersHandler::handleRequest
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - sns:Publish
            Resource: "*"
      Events:
        JobCreatedEvent:
          Type: CloudWatchEvent
          Properties:
            EventBusName: !Ref JobsEventBus
            Pattern:
              source: ["jobs-service"]
              detail-type: ["job.created"]

  ## Job Notification Handler
  JobNotificationHandler:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-JobNotificationHandler"
      CodeUri: jobs/
      Handler: com.freelance.jobs.notifications.JobNotificationHandler::handleRequest
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          FROM_EMAIL_ADDRESS: "noreply@freelanceplatform.com"
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - ses:SendEmail
              - ses:SendRawEmail
            Resource: "*"
        - Statement:
          - Effect: Allow
            Action:
              - cognito-idp:AdminGetUser
            Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}"
      Events:
        NotificationTopic:
          Type: SNS
          Properties:
            Topic: !Ref JobNotificationsTopic

  ## Event Processors - Forward to Centralized Topic
  JobClaimedProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-JobClaimedProcessor"
      CodeUri: jobs/
      Handler: com.freelance.jobs.events.processors.JobClaimedProcessor::handleRequest
      Environment:
        Variables:
          NOTIFICATION_TOPIC_ARN: !Ref JobNotificationsTopic
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - sns:Publish
            Resource: !Ref JobNotificationsTopic
      Events:
        JobClaimedEvent:
          Type: CloudWatchEvent
          Properties:
            EventBusName: !Ref JobsEventBus
            Pattern:
              source: ["jobs-service"]
              detail-type: ["job.claimed"]

  JobSubmittedProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-JobSubmittedProcessor"
      CodeUri: jobs/
      Handler: com.freelance.jobs.events.processors.JobSubmittedProcessor::handleRequest
      Environment:
        Variables:
          NOTIFICATION_TOPIC_ARN: !Ref JobNotificationsTopic
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - sns:Publish
            Resource: !Ref JobNotificationsTopic
      Events:
        JobSubmittedEvent:
          Type: CloudWatchEvent
          Properties:
            EventBusName: !Ref JobsEventBus
            Pattern:
              source: ["jobs-service"]
              detail-type: ["job.submitted"]

  JobApprovedProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-JobApprovedProcessor"
      CodeUri: jobs/
      Handler: com.freelance.jobs.events.processors.JobApprovedProcessor::handleRequest
      Environment:
        Variables:
          NOTIFICATION_TOPIC_ARN: !Ref JobNotificationsTopic
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - sns:Publish
            Resource: !Ref JobNotificationsTopic
      Events:
        JobApprovedEvent:
          Type: CloudWatchEvent
          Properties:
            EventBusName: !Ref JobsEventBus
            Pattern:
              source: ["jobs-service"]
              detail-type: ["job.approved"]

  JobRejectedProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-JobRejectedProcessor"
      CodeUri: jobs/
      Handler: com.freelance.jobs.events.processors.JobRejectedProcessor::handleRequest
      Environment:
        Variables:
          NOTIFICATION_TOPIC_ARN: !Ref JobNotificationsTopic
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - sns:Publish
            Resource: !Ref JobNotificationsTopic
      Events:
        JobRejectedEvent:
          Type: CloudWatchEvent
          Properties:
            EventBusName: !Ref JobsEventBus
            Pattern:
              source: ["jobs-service"]
              detail-type: ["job.rejected"]

  ## =========================
  ## Scheduler Functions
  ## =========================
  JobExpiryScannerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-JobExpiryScanner"
      CodeUri: jobs/
      Handler: com.freelance.jobs.schedulers.JobExpiryScanner::handleRequest
      Timeout: 300  # 5 minutes
      Environment:
        Variables:
          JOBS_TABLE_NAME: !Ref JobsTable
          JOB_EXPIRY_QUEUE_URL: !Ref JobExpiryQueue
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref JobsTable
        - Statement:
          - Effect: Allow
            Action:
              - sqs:SendMessage
            Resource: !GetAtt JobExpiryQueue.Arn
      Events:
        ExpirySchedule:
          Type: Schedule
          Properties:
            Schedule: "rate(5 minutes)"  
            Description: "Trigger job expiry scanner every 5 minutes"

  JobExpiryProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-JobExpiryProcessor"
      CodeUri: jobs/
      Handler: com.freelance.jobs.schedulers.processors.JobExpiryProcessor::handleRequest
      Timeout: 60
      Environment:
        Variables:
          NOTIFICATION_TOPIC_ARN: !Ref JobNotificationsTopic
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - sns:Publish
            Resource: !Ref JobNotificationsTopic
      Events:
        ExpiryQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt JobExpiryQueue.Arn
            BatchSize: 10

  JobTimeoutScannerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-JobTimeoutScanner"
      CodeUri: jobs/
      Handler: com.freelance.jobs.schedulers.JobTimeoutScanner::handleRequest
      Timeout: 300  
      Environment:
        Variables:
          JOBS_TABLE_NAME: !Ref JobsTable
          JOB_TIMEOUT_QUEUE_URL: !Ref JobTimeoutQueue
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref JobsTable
        - Statement:
          - Effect: Allow
            Action:
              - sqs:SendMessage
            Resource: !GetAtt JobTimeoutQueue.Arn
      Events:
        TimeoutSchedule:
          Type: Schedule
          Properties:
            Schedule: "rate(2 minutes)"  
            Description: "Trigger job timeout scanner every 2 minutes"

  JobTimeoutProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-JobTimeoutProcessor"
      CodeUri: jobs/
      Handler: com.freelance.jobs.schedulers.processors.JobTimeoutProcessor::handleRequest
      Timeout: 60
      Environment:
        Variables:
          NOTIFICATION_TOPIC_ARN: !Ref JobNotificationsTopic
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - sns:Publish
            Resource: !Ref JobNotificationsTopic
      Events:
        TimeoutQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt JobTimeoutQueue.Arn
            BatchSize: 10

  ###################################
  # DynamoDB Tables
  ###################################
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "UsersTable-${Environment}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  AccountsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "AccountsTable-${Environment}"
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: accountNumber
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: AccountNumberIndex
          KeySchema:
            - AttributeName: accountNumber
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  ###################################
  # SNS Topic for Job Alerts
  ###################################
  JobAlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "JobAlertsTopic-${Environment}"

  ###################################
  # Cognito User Pool, Groups(Roles) and Client
  ###################################
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "FreelancePlatformUserPool-${Environment}"
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      LambdaConfig:
        PostConfirmation: !GetAtt PostConfirmationLambda.Arn
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: given_name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: family_name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: middle_name
          AttributeDataType: String
          Mutable: true
        - Name: job_category
          AttributeDataType: String
          Mutable: true
        - Name: phone_number
          AttributeDataType: String
          Mutable: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub "FreelancePlatformUserPoolClient-${Environment}"
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      SupportedIdentityProviders:
        - COGNITO
      PreventUserExistenceErrors: ENABLED
      CallbackURLs:
        - https://www.example.com/callback   # for local testing
      LogoutURLs:
        - https://www.example.com/logout     # for local testing
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      AllowedOAuthFlowsUserPoolClient: true

  UserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: USER
      Precedence: 2
      UserPoolId: !Ref UserPool
      Description: "Regular users of the platform"

  AdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: ADMIN
      Precedence: 1
      UserPoolId: !Ref UserPool
      Description: "Platform administrators"

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub "freelance-platform-${Environment}-${AWS::AccountId}"
      UserPoolId: !Ref UserPool

  ###################################
  # Lambda Functions
  ###################################
  PostConfirmationLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "PostConfirmationLambda-${Environment}"
      CodeUri: .
      Handler: com.freelanceplatform.handlers.users.PostConfirmationHandler::handleRequest
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - states:StartExecution
              Resource: !Ref UserOnboardingStateMachine
            - Effect: Allow
              Action:
                - cognito-idp:AdminAddUserToGroup
              Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*"
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "*"
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref UserOnboardingStateMachine
          ENVIRONMENT: !Ref Environment

  # Allow Cognito to invoke PostConfirmation Lambda
  LambdaPermissionForCognito:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PostConfirmationLambda.Arn
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  GenerateUserIdLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "GenerateUserIdLambda-${Environment}"
      CodeUri: .
      Handler: com.freelanceplatform.handlers.users.GenerateUserIdHandler::handleRequest
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment

  SaveUserDataLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "SaveUserDataLambda-${Environment}"
      CodeUri: .
      Handler: com.freelanceplatform.handlers.users.SaveUserDataHandler::handleRequest
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable
          ENVIRONMENT: !Ref Environment

  CreateAccountLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "CreateAccountLambda-${Environment}"
      CodeUri: .
      Handler: com.freelanceplatform.handlers.users.CreateAccountHandler::handleRequest
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AccountsTable
      Environment:
        Variables:
          ACCOUNTS_TABLE: !Ref AccountsTable
          ENVIRONMENT: !Ref Environment

  SubscribeUserToSNSLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "SubscribeUserToSNSLambda-${Environment}"
      CodeUri: .
      Handler: com.freelanceplatform.handlers.users.SubscribeUserToSNSHandler::handleRequest
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - sns:Subscribe
                - sns:SetSubscriptionAttributes
              Resource: !Ref JobAlertsTopic
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref JobAlertsTopic
          ENVIRONMENT: !Ref Environment

  DeleteUserHandler:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "DeleteUserHandler-${Environment}"
      CodeUri: .
      Handler: com.freelanceplatform.handlers.users.DeleteUserHandler::handleRequest
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref AccountsTable
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable
          ACCOUNTS_TABLE: !Ref AccountsTable
          ENVIRONMENT: !Ref Environment

  ###################################
  # Step Functions
  ###################################
  UserOnboardingStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub "UserOnboardingWorkflow-${Environment}"
      Definition:
        Comment: "User onboarding after Cognito signup"
        StartAt: GenerateUserId
        States:
          GenerateUserId:
            Type: Task
            Resource: !GetAtt GenerateUserIdLambda.Arn
            Next: SaveUserData
          SaveUserData:
            Type: Task
            Resource: !GetAtt SaveUserDataLambda.Arn
            Next: CreateAccount
          CreateAccount:
            Type: Task
            Resource: !GetAtt CreateAccountLambda.Arn
            Next: SubscribeUserToSNS
          SubscribeUserToSNS:
            Type: Task
            Resource: !GetAtt SubscribeUserToSNSLambda.Arn
            End: true
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref GenerateUserIdLambda
        - LambdaInvokePolicy:
            FunctionName: !Ref SaveUserDataLambda
        - LambdaInvokePolicy:
            FunctionName: !Ref CreateAccountLambda
        - LambdaInvokePolicy:
            FunctionName: !Ref SubscribeUserToSNSLambda

  UserDeletionCleanupStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub "UserDeletionCleanupWorkflow-${Environment}"
      Definition:
        Comment: "User deletion cleanup after Cognito user removal"
        StartAt: DeleteUserDataAndAccount
        States:
          DeleteUserDataAndAccount:
            Type: Task
            Resource: !GetAtt DeleteUserHandler.Arn
            End: true
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref DeleteUserHandler

  ###################################
  # EventBridge Rule for User Deletion Detection
  ###################################
  UserDeletionEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Trigger cleanup Step Function on Cognito user deletion"
      EventPattern:
        source:
          - aws.cognito-idp
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventName:
            - AdminDeleteUser
            - DeleteUser
      Targets:
        - Arn: !Ref UserDeletionCleanupStateMachine
          Id: "UserDeletionStepFunctionTarget"
          RoleArn: !GetAtt EventBridgeInvokeStepFunctionRole.Arn

  EventBridgeInvokeStepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: InvokeStepFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource:
                  - !Ref UserDeletionCleanupStateMachine
                  - !Ref UserOnboardingStateMachine

Outputs:
  ## Unified API Gateway Output
  FreelancePlatformApiUrl:
    Description: "Unified Freelance Platform API URL"
    Value: !Sub "https://${FreelancePlatformApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
    Export:
      Name: !Sub "${Environment}-freelance-api-url"

  FreelancePlatformApiId:
    Description: "API Gateway ID"
    Value: !Ref FreelancePlatformApi
    Export:
      Name: !Sub "${Environment}-freelance-api-id"

  ## Table Outputs
  CategoriesTableName:
    Description: "Categories DynamoDB Table Name"
    Value: !Ref CategoriesTable
    Export:
      Name: !Sub "${Environment}-categories-table-name"

  CategoriesTableArn:
    Description: "Categories DynamoDB Table ARN"
    Value: !GetAtt CategoriesTable.Arn
    Export:
      Name: !Sub "${Environment}-categories-table-arn"

  JobsTableName:
    Description: "Jobs DynamoDB Table Name"
    Value: !Ref JobsTable
    Export:
      Name: !Sub "${Environment}-jobs-table-name"

  JobsTableArn:
    Description: "Jobs DynamoDB Table ARN"
    Value: !GetAtt JobsTable.Arn
    Export:
      Name: !Sub "${Environment}-jobs-table-arn"

  ClaimsTableName:
    Description: "Claims DynamoDB Table Name"
    Value: !Ref ClaimsTable
    Export:
      Name: !Sub "${Environment}-claims-table-name"

  UsersTableName:
    Description: "Users DynamoDB Table Name"
    Value: !Ref UsersTableName

  ## EventBridge Outputs
  JobsEventBusName:
    Description: "EventBridge Custom Bus for Jobs Events"
    Value: !Ref JobsEventBus
    Export:
      Name: !Sub "${Environment}-jobs-event-bus-name"

  JobsEventBusArn:
    Description: "EventBridge Custom Bus ARN for Jobs Events"
    Value: !GetAtt JobsEventBus.Arn
    Export:
      Name: !Sub "${Environment}-jobs-event-bus-arn"

  ## Notification System Outputs
  JobNotificationsTopicArn:
    Description: "Centralized Job Notifications SNS Topic ARN"
    Value: !Ref JobNotificationsTopic
    Export:
      Name: !Sub "${Environment}-job-notifications-topic-arn"

  ## Job Management System Outputs
  JobExpiryQueueUrl:
    Description: "SQS Queue URL for Job Expiry Processing"
    Value: !Ref JobExpiryQueue
    Export:
      Name: !Sub "${Environment}-job-expiry-queue-url"

  JobTimeoutQueueUrl:
    Description: "SQS Queue URL for Job Timeout Processing"
    Value: !Ref JobTimeoutQueue
    Export:
      Name: !Sub "${Environment}-job-timeout-queue-url"

  ## User Management Outputs
  UserPoolId:
    Description: "Cognito User Pool Id"
    Value: !Ref UserPool
    Export:
      Name: !Sub "FreelancePlatform-UserPoolId-${Environment}"

  UserPoolClientId:
    Description: "Cognito User Pool Client Id"
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub "FreelancePlatform-UserPoolClientId-${Environment}"

  UserOnboardingStateMachineArn:
    Description: "ARN of User Onboarding Step Function"
    Value: !Ref UserOnboardingStateMachine
    Export:
      Name: !Sub "FreelancePlatform-UserOnboardingSFNArn-${Environment}"

  UserDeletionCleanupStateMachineArn:
    Description: "ARN of User Deletion Cleanup Step Function"
    Value: !Ref UserDeletionCleanupStateMachine
    Export:
      Name: !Sub "FreelancePlatform-UserDeletionCleanupSFNArn-${Environment}"

  CognitoHostedUiUrl:
    Description: "Cognito Hosted UI Login URL"
    Value: !Sub "https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com/login?client_id=${UserPoolClient}&response_type=code&scope=email+openid+profile&redirect_uri=https://www.example.com/callback"
    Export:
      Name: !Sub "FreelancePlatform-HostedUiUrl-${Environment}"
