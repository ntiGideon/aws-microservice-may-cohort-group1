AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Freelance Job/Task Platform
 
  Unified serverless freelance platform with single API Gateway.

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, prod]
    Description: Environment name
  
  UsersTableName:
    Type: String
    Default: dev-UsersTable
    Description: Name of the existing Users table

Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: java17
    Architectures:
      - x86_64
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment

Resources:
  ## =========================
  ## Freelance Platform API Gateway
  ## =========================
  FreelancePlatformApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${Environment}-freelance-platform-api"
      StageName: Prod
      EndpointConfiguration: REGIONAL
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-User-ID,X-User-Email,X-User-Type'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
        AllowCredentials: false
      BinaryMediaTypes:
        - "*/*"
      TracingEnabled: true
      Variables:
        ENVIRONMENT: !Ref Environment
      Tags:
        Environment: !Ref Environment
        Project: FreelancePlatform

  ## =========================
  ## DynamoDB Tables
  ## =========================
  CategoriesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-CategoriesTable"
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        - AttributeName: categoryId
          AttributeType: S
        - AttributeName: name
          AttributeType: S
      KeySchema:
        - AttributeName: categoryId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: NameIndex
          KeySchema:
            - AttributeName: name
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: FreelancePlatform
        - Key: Service
          Value: Categories

  JobsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-JobsTable"
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        - AttributeName: jobId
          AttributeType: S
        - AttributeName: categoryId
          AttributeType: S
        - AttributeName: status
          AttributeType: S
        - AttributeName: ownerId
          AttributeType: S
        - AttributeName: datePosted
          AttributeType: S
        - AttributeName: expiryDate
          AttributeType: S
        - AttributeName: claimerId
          AttributeType: S
        - AttributeName: claimedAt
          AttributeType: S
      KeySchema:
        - AttributeName: jobId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: CategoryStatusIndex
          KeySchema:
            - AttributeName: categoryId
              KeyType: HASH
            - AttributeName: status
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: OwnerJobsIndex
          KeySchema:
            - AttributeName: ownerId
              KeyType: HASH
            - AttributeName: datePosted
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: StatusExpiryIndex
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: expiryDate
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: ClaimerJobsIndex
          KeySchema:
            - AttributeName: claimerId
              KeyType: HASH
            - AttributeName: claimedAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: FreelancePlatform
        - Key: Service
          Value: Jobs

  ClaimsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-ClaimsTable"
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        - AttributeName: claimId
          AttributeType: S
        - AttributeName: jobId
          AttributeType: S
        - AttributeName: status
          AttributeType: S
        - AttributeName: claimerId
          AttributeType: S
        - AttributeName: claimedAt
          AttributeType: S
        - AttributeName: submissionDeadline
          AttributeType: S
      KeySchema:
        - AttributeName: claimId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: JobClaimsIndex
          KeySchema:
            - AttributeName: jobId
              KeyType: HASH
            - AttributeName: status
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: ClaimerClaimsIndex
          KeySchema:
            - AttributeName: claimerId
              KeyType: HASH
            - AttributeName: claimedAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: StatusDeadlineIndex
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: submissionDeadline
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: FreelancePlatform
        - Key: Service
          Value: Jobs

  ## =========================
  ## EventBridge Resources
  ## =========================
  JobsEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub "${Environment}-freelance-jobs-events"

  ## =========================
  ## SNS Topic for Notifications
  ## =========================
  JobNotificationsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${Environment}-job-notifications"
      DisplayName: "Job Platform Notifications"

  ## =========================
  ## Job Expiry System
  ## =========================
  JobExpiryQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${Environment}-job-expiry-queue.fifo"
      FifoQueue: true
      ContentBasedDeduplication: false
      MessageRetentionPeriod: 1209600  # 14 days
      VisibilityTimeout: 300    # 5 minutes
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt JobExpiryDeadLetterQueue.Arn
        maxReceiveCount: 3

  JobExpiryDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${Environment}-job-expiry-dlq.fifo"
      FifoQueue: true
      MessageRetentionPeriod: 1209600  # 14 days

  ## =========================
  ## Job Timeout System  
  ## =========================
  JobTimeoutQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${Environment}-job-timeout-queue.fifo"
      FifoQueue: true
      ContentBasedDeduplication: false
      MessageRetentionPeriod: 1209600  # 14 days
      VisibilityTimeout: 300    # 5 minutes
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt JobTimeoutDeadLetterQueue.Arn
        maxReceiveCount: 3

  JobTimeoutDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${Environment}-job-timeout-dlq.fifo"
      FifoQueue: true
      MessageRetentionPeriod: 1209600  # 14 days

  ## =========================
  ## Categories Lambda Functions
  ## =========================
  CreateCategoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-CreateCategory"
      CodeUri: categories/
      Handler: com.freelance.categories.CreateCategoryHandler::handleRequest
      Environment:
        Variables:
          CATEGORIES_TABLE_NAME: !Ref CategoriesTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CategoriesTable
      Events:
        CreateCategoryApi:
          Type: Api
          Properties:
            RestApiId: !Ref FreelancePlatformApi
            Path: /categories
            Method: post

  GetCategoriesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-GetCategories"
      CodeUri: categories/
      Handler: com.freelance.categories.GetCategoriesHandler::handleRequest
      Environment:
        Variables:
          CATEGORIES_TABLE_NAME: !Ref CategoriesTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref CategoriesTable
      Events:
        GetCategoriesApi:
          Type: Api
          Properties:
            RestApiId: !Ref FreelancePlatformApi
            Path: /categories
            Method: get

  CategoryStreamProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-CategoryStreamProcessor"
      CodeUri: categories/
      Handler: com.freelance.categories.CategoryStreamProcessor::handleRequest
      Environment:
        Variables:
          CATEGORIES_TABLE_NAME: !Ref CategoriesTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CategoriesTable
        - Statement:
          - Effect: Allow
            Action:
              - sns:CreateTopic
              - sns:GetTopicAttributes
            Resource: "*"
      Events:
        CategoryStreamEvent:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt CategoriesTable.StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 5

  ## =========================
  ## Jobs Lambda Functions
  ## =========================
  JobRouterFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-JobRouter"
      CodeUri: jobs/
      Handler: com.freelance.jobs.shared.JobRouter::handleRequest
      Timeout: 60
      Environment:
        Variables:
          JOBS_TABLE_NAME: !Ref JobsTable
          CATEGORIES_TABLE_NAME: !Ref CategoriesTable
          EVENT_BUS_NAME: !Ref JobsEventBus
          AWS_ACCOUNT_ID: !Ref AWS::AccountId
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref JobsTable
        - DynamoDBReadPolicy:
            TableName: !Ref CategoriesTable
        - Statement:
          - Effect: Allow
            Action:
              - events:PutEvents
            Resource: !GetAtt JobsEventBus.Arn
      Events:
        JobApi:
          Type: Api
          Properties:
            RestApiId: !Ref FreelancePlatformApi
            Path: /job/{proxy+}
            Method: ANY

  ## =========================
  ## Event Processor Functions
  ## =========================
  JobCreatedProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-JobCreatedProcessor"
      CodeUri: jobs/
      Handler: com.freelance.jobs.events.processors.NotifyJobCategorySubscribersHandler::handleRequest
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - sns:Publish
            Resource: "*"
      Events:
        JobCreatedEvent:
          Type: CloudWatchEvent
          Properties:
            EventBusName: !Ref JobsEventBus
            Pattern:
              source: ["jobs-service"]
              detail-type: ["job.created"]

  ## Job Notification Handler
  JobNotificationHandler:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-JobNotificationHandler"
      CodeUri: jobs/
      Handler: com.freelance.jobs.notifications.JobNotificationHandler::handleRequest
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTableName
          FROM_EMAIL_ADDRESS: "noreply@freelanceplatform.com"
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - ses:SendEmail
              - ses:SendRawEmail
            Resource: "*"
        - Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
            Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${UsersTableName}"
      Events:
        NotificationTopic:
          Type: SNS
          Properties:
            Topic: !Ref JobNotificationsTopic

  ## Event Processors - Forward to Centralized Topic
  JobClaimedProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-JobClaimedProcessor"
      CodeUri: jobs/
      Handler: com.freelance.jobs.events.processors.JobClaimedProcessor::handleRequest
      Environment:
        Variables:
          NOTIFICATION_TOPIC_ARN: !Ref JobNotificationsTopic
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - sns:Publish
            Resource: !Ref JobNotificationsTopic
      Events:
        JobClaimedEvent:
          Type: CloudWatchEvent
          Properties:
            EventBusName: !Ref JobsEventBus
            Pattern:
              source: ["jobs-service"]
              detail-type: ["job.claimed"]

  JobSubmittedProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-JobSubmittedProcessor"
      CodeUri: jobs/
      Handler: com.freelance.jobs.events.processors.JobSubmittedProcessor::handleRequest
      Environment:
        Variables:
          NOTIFICATION_TOPIC_ARN: !Ref JobNotificationsTopic
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - sns:Publish
            Resource: !Ref JobNotificationsTopic
      Events:
        JobSubmittedEvent:
          Type: CloudWatchEvent
          Properties:
            EventBusName: !Ref JobsEventBus
            Pattern:
              source: ["jobs-service"]
              detail-type: ["job.submitted"]

  JobApprovedProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-JobApprovedProcessor"
      CodeUri: jobs/
      Handler: com.freelance.jobs.events.processors.JobApprovedProcessor::handleRequest
      Environment:
        Variables:
          NOTIFICATION_TOPIC_ARN: !Ref JobNotificationsTopic
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - sns:Publish
            Resource: !Ref JobNotificationsTopic
      Events:
        JobApprovedEvent:
          Type: CloudWatchEvent
          Properties:
            EventBusName: !Ref JobsEventBus
            Pattern:
              source: ["jobs-service"]
              detail-type: ["job.approved"]

  JobRejectedProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-JobRejectedProcessor"
      CodeUri: jobs/
      Handler: com.freelance.jobs.events.processors.JobRejectedProcessor::handleRequest
      Environment:
        Variables:
          NOTIFICATION_TOPIC_ARN: !Ref JobNotificationsTopic
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - sns:Publish
            Resource: !Ref JobNotificationsTopic
      Events:
        JobRejectedEvent:
          Type: CloudWatchEvent
          Properties:
            EventBusName: !Ref JobsEventBus
            Pattern:
              source: ["jobs-service"]
              detail-type: ["job.rejected"]

  ## =========================
  ## Scheduler Functions
  ## =========================
  JobExpiryScannerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-JobExpiryScanner"
      CodeUri: jobs/
      Handler: com.freelance.jobs.schedulers.JobExpiryScanner::handleRequest
      Timeout: 300  # 5 minutes
      Environment:
        Variables:
          JOBS_TABLE_NAME: !Ref JobsTable
          JOB_EXPIRY_QUEUE_URL: !Ref JobExpiryQueue
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref JobsTable
        - Statement:
          - Effect: Allow
            Action:
              - sqs:SendMessage
            Resource: !GetAtt JobExpiryQueue.Arn
      Events:
        ExpirySchedule:
          Type: Schedule
          Properties:
            Schedule: "rate(5 minutes)"  
            Description: "Trigger job expiry scanner every 5 minutes"

  JobExpiryProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-JobExpiryProcessor"
      CodeUri: jobs/
      Handler: com.freelance.jobs.schedulers.processors.JobExpiryProcessor::handleRequest
      Timeout: 60
      Environment:
        Variables:
          NOTIFICATION_TOPIC_ARN: !Ref JobNotificationsTopic
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - sns:Publish
            Resource: !Ref JobNotificationsTopic
      Events:
        ExpiryQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt JobExpiryQueue.Arn
            BatchSize: 10

  JobTimeoutScannerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-JobTimeoutScanner"
      CodeUri: jobs/
      Handler: com.freelance.jobs.schedulers.JobTimeoutScanner::handleRequest
      Timeout: 300  
      Environment:
        Variables:
          JOBS_TABLE_NAME: !Ref JobsTable
          JOB_TIMEOUT_QUEUE_URL: !Ref JobTimeoutQueue
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref JobsTable
        - Statement:
          - Effect: Allow
            Action:
              - sqs:SendMessage
            Resource: !GetAtt JobTimeoutQueue.Arn
      Events:
        TimeoutSchedule:
          Type: Schedule
          Properties:
            Schedule: "rate(2 minutes)"  
            Description: "Trigger job timeout scanner every 2 minutes"

  JobTimeoutProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-JobTimeoutProcessor"
      CodeUri: jobs/
      Handler: com.freelance.jobs.schedulers.processors.JobTimeoutProcessor::handleRequest
      Timeout: 60
      Environment:
        Variables:
          NOTIFICATION_TOPIC_ARN: !Ref JobNotificationsTopic
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - sns:Publish
            Resource: !Ref JobNotificationsTopic
      Events:
        TimeoutQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt JobTimeoutQueue.Arn
            BatchSize: 10

Outputs:
  ## Unified API Gateway Output
  FreelancePlatformApiUrl:
    Description: "Unified Freelance Platform API URL"
    Value: !Sub "https://${FreelancePlatformApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
    Export:
      Name: !Sub "${Environment}-freelance-api-url"

  FreelancePlatformApiId:
    Description: "API Gateway ID"
    Value: !Ref FreelancePlatformApi
    Export:
      Name: !Sub "${Environment}-freelance-api-id"

  ## Table Outputs
  CategoriesTableName:
    Description: "Categories DynamoDB Table Name"
    Value: !Ref CategoriesTable
    Export:
      Name: !Sub "${Environment}-categories-table-name"

  CategoriesTableArn:
    Description: "Categories DynamoDB Table ARN"
    Value: !GetAtt CategoriesTable.Arn
    Export:
      Name: !Sub "${Environment}-categories-table-arn"

  JobsTableName:
    Description: "Jobs DynamoDB Table Name"
    Value: !Ref JobsTable
    Export:
      Name: !Sub "${Environment}-jobs-table-name"

  JobsTableArn:
    Description: "Jobs DynamoDB Table ARN"
    Value: !GetAtt JobsTable.Arn
    Export:
      Name: !Sub "${Environment}-jobs-table-arn"

  ClaimsTableName:
    Description: "Claims DynamoDB Table Name"
    Value: !Ref ClaimsTable
    Export:
      Name: !Sub "${Environment}-claims-table-name"

  UsersTableName:
    Description: "Users DynamoDB Table Name"
    Value: !Ref UsersTableName

  ## EventBridge Outputs
  JobsEventBusName:
    Description: "EventBridge Custom Bus for Jobs Events"
    Value: !Ref JobsEventBus
    Export:
      Name: !Sub "${Environment}-jobs-event-bus-name"

  JobsEventBusArn:
    Description: "EventBridge Custom Bus ARN for Jobs Events"
    Value: !GetAtt JobsEventBus.Arn
    Export:
      Name: !Sub "${Environment}-jobs-event-bus-arn"

  ## Notification System Outputs
  JobNotificationsTopicArn:
    Description: "Centralized Job Notifications SNS Topic ARN"
    Value: !Ref JobNotificationsTopic
    Export:
      Name: !Sub "${Environment}-job-notifications-topic-arn"

  ## Job Management System Outputs
  JobExpiryQueueUrl:
    Description: "SQS Queue URL for Job Expiry Processing"
    Value: !Ref JobExpiryQueue
    Export:
      Name: !Sub "${Environment}-job-expiry-queue-url"

  JobTimeoutQueueUrl:
    Description: "SQS Queue URL for Job Timeout Processing"
    Value: !Ref JobTimeoutQueue
    Export:
      Name: !Sub "${Environment}-job-timeout-queue-url"